openapi: 3.0.3
x-stoplight:
  id: 3ngl049ongtqy
info:
  title: Arttaca - OpenAPI 3.0
  description: |-
    This is the Arttaca API documentation based on the OpenAPI 3.0 specification.

    Some useful links:
    - [Arttaca](https://arttaca.io)
    - [The Arttaca GitHub repository](https://github.com/Arttaca)
  termsOfService: 'https://arttaca.io/'
  contact:
    email: leon@dandelionventures.io
    name: Leon Acosta
    url: leon@dandelionventures.io
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
  version: 1.0.11
externalDocs:
  description: Find out more about Arttaca
  url: 'https://arttaca.io/about'
servers:
  - url: 'http://localhost:9999'
tags:
  - name: historical
    description: Everything about the history of orders
    externalDocs:
      description: Find out more about Arttaca
      url: 'https://arttaca.io/about'
  - name: order
    description: Everything about orders
    externalDocs:
      description: Find out more
      url: 'https://arttaca.io/about'
  - name: trade
    description: Everything about trades
    externalDocs:
      description: Find out more about Arttaca
      url: 'https://arttaca.io/about'
paths:
  /orders/{order}:
    post:
      tags:
        - order
      summary: Add a new order to the Orders table
      description: Add a new order to the Orders table
      operationId: addOrder
      parameters:
        - in: path
          name: order
      requestBody:
        description: Create a new order in Orders
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Orders'
          application/xml:
            schema:
              $ref: '#/components/schemas/Orders'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Orders'
          multipart/form-data:
            schema:
              type: object
              properties:
                '':
                  type: string
                  x-stoplight:
                    id: 1
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Orders'
            application/xml:
              schema:
                $ref: '#/components/schemas/Orders'
        '405':
          description: Invalid input
      security:
        - arttaca_auth:
            - 'write:order'
            - 'read:order'
  /trades:
    post:
      tags:
        - trade
      summary: Add a new trade to the Trades table
      description: Add a new trade to the Trades table
      operationId: addTrade
      requestBody:
        description: Create a new trade in Trades
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Trades'
          application/xml:
            schema:
              $ref: '#/components/schemas/Trades'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Trades'
          multipart/form-data:
            schema:
              type: object
              properties:
                '':
                  type: string
                  x-stoplight:
                    id: z37n2blj91ix7
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trades'
            application/xml:
              schema:
                $ref: '#/components/schemas/Trades'
        '405':
          description: Invalid input
      security:
        - arttaca_auth:
            - 'write:trades'
            - 'read:trades'
  /historical:
    post:
      tags:
        - historical
      summary: Orders which have either COMPLETED | CANCELLED | EXPIRED are placed into the historical table
      description: Add a new order to historical table
      operationId: addHistorical
      requestBody:
        description: Create a new order in Historical
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Historical'
          application/xml:
            schema:
              $ref: '#/components/schemas/Historical'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Historical'
          multipart/form-data:
            schema:
              type: object
              properties:
                '':
                  type: string
                  x-stoplight:
                    id: 2
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Trades'
            application/xml:
              schema:
                $ref: '#/components/schemas/Trades'
        '405':
          description: Invalid input
      security:
        - arttaca_auth:
            - 'write:trades'
            - 'read:trades'
components:
  schemas:
    Orders:
      type: object
      xml:
        name: order
      x-stoplight:
        id: 3
      properties:
        id:
          type: integer
          format: int32
          example: 1
        userAddress:
          type: string
          description: The address of the user who initiated the order to BUY or SELL
          example: 0xfj93hf39fh934hf93478hf
        quantity:
          type: integer
          format: int32
          description: The amount of tokens the user wants to BUY or SELL
          example: 7
        orderType:
          type: string
          description: 'The order type, BUY or SELL'
          enum:
            - BUY
            - SELL
          example: BUY
        itemType:
          type: string
          description: 'The item type, NFT | NFT_PLUS | SFT'
          enum:
            - NFT
            - NFT_PLUS
            - SFT
          example: SFT
        assetId:
          type: integer
          format: int64
          description: The ID of the ERC1155 token
          example: 1
        price:
          type: integer
          format: float
          description: The price of the token (1 token)
          example: 2
        listingSignature:
          type: string
          description: The signature related to the order
          example: ifeurfh9eurf3489348r9fh3fh9384hf99384hf9348hf9384hf9h
        expirationDate:
          type: integer
          format: int32
          description: 'If the order is not fulfilled by this date, the order will be removed from ''orders'' and placed into ''history'' with status of ''EXPIRED'''
          example: 2
        createdAt:
          type: string
          format: date
          description: The time the order was created
          example: '2019-02-03'
        updatedAt:
          type: string
          format: date
          description: The time the order was updated
          example: '2019-02-03'
      required:
        - userAddress
        - quantity
        - type
        - assetId
        - price
        - listingSignature
        - expirationDate
        - orderType
        - itemType
    Trades:
      type: object
      xml:
        name: trade
      x-stoplight:
        id: 4
        properties:
          id:
            type: integer
            format: int32
            example: 1
          orderTableId:
            type: integer
            format: int32
            example: 12
          userAddress:
            type: string
            description: The address of the user who initialised the order
            example: 0xbdfhjweuf384gf8g34fgd8h3e
          quantity:
            type: integer
            format: int32
          createdAt:
            type: string
            format: date
            description: The time the order was created
            example: '2019-02-03'
          updatedAt:
            type: string
            format: date
            description: The time the order was updated
            example: '2019-02-03'
        required:
          - orderTableId
          - userAddress
          - quantity
          - createdAt
    Historical:
      type: object
      xml:
        name: historical
      x-stoplight:
        id: 5
        properties:
          id:
          type: integer
          format: int32
          example: 1
        userAddress:
          type: string
          description: The address of the user who initiated the order to BUY or SELL
          example: 0xfj93hf39fh934hf93478hf
        quantity:
          type: integer
          format: int32
          description: The amount of tokens the user wants to BUY or SELL
          example: 7
        orderType:
          type: string
          description: 'The order type, BUY or SELL'
          enum:
            - BUY
            - SELL
          example: BUY
        itemType:
          type: string
          description: 'The item type, NFT | NFT_PLUS | SFT'
          enum:
            - NFT
            - NFT_PLUS
            - SFT
          example: SFT
        assetId:
          type: integer
          format: int64
          description: The ID of the ERC1155 token
          example: 1
        price:
          type: integer
          format: float
          description: The price of the token (1 token)
          example: 2
        listingSignature:
          type: string
          description: The signature related to the order
          example: ifeurfh9eurf3489348r9fh3fh9384hf99384hf9348hf9384hf9h
        expirationDate:
          type: integer
          format: int32
          description: 'If the order is not fulfilled by this date, the order will be removed from ''orders'' and placed into ''history'' with status of ''EXPIRED'''
          example: 2
        status:
          type: string
          description: 'The reason for being in the historical table. CANCELLED | COMPLETED | EXPIRED'
          enum:
            - CANCELLED
            - COMPLETED
            - EXPIRED
        createdAt:
          type: string
          format: date
          description: The time the order was created
          example: '2019-02-03'
        updatedAt:
          type: string
          format: date
          description: The time the order was updated
          example: '2019-02-03'
      required:
        - userAddress
        - quantity
        - type
        - assetId
        - price
        - listingSignature
        - expirationDate
        - orderType
        - itemType
        - status
  requestBodies:
    Order:
      description: An order object that needs to be added to the 'Orders' table
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Orders"
        application/xml:
          schema:
            $ref: '#/components/schemas/Orders'
        multipart/form-data:
          schema:
            type: object
            properties:
              '':
                type: string
                x-stoplight:
                  id: 6
    Trades:
      description: An order object that needs to be added to the 'Orders' table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Trades'
        application/xml:
          schema:
            $ref: '#/components/schemas/Trades'
        multipart/form-data:
          schema:
            type: object
            properties:
              '':
                type: string
                x-stoplight:
                  id: 7
    Historical:
      description: An order object that needs to be added to the 'Historical' table
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Historical'
        application/xml:
          schema:
            $ref: '#/components/schemas/Historical'
        multipart/form-data:
          schema:
            type: object
            properties:
              '':
                type: string
                x-stoplight:
                  id: 8
  securitySchemes:
    arttaca_auth:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: 'https://arttaca-authorization-url.io/'
          scopes:
            'write:order': modify orders in your account
            'read:order': view your orders
    api_key:
      type: apiKey
      name: api_key
      in: header
